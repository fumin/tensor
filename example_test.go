package tensor_test

import (
	"fmt"
	"log"
	"math/cmplx"

	"github.com/fumin/tensor"
)

func Example() {
	a := tensor.T3([][][]complex64{
		{{-6i, 5}, {-1 + 1i, -1 - 1i}, {4, -3 + 3i}},
		{{0, 0}, {0, 0}, {0, 0}},
	})

	// Slice and reshape.
	b := a.Slice([][2]int{{0, 1}, {0, 3}, {0, 2}})
	b = b.Reshape(3, 2)
	fmt.Println("Slice and reshape", b.ToSlice2())

	// Transpose and update.
	b = b.Transpose(1, 0)
	b = b.Slice([][2]int{{0, 2}, {1, 3}})
	b.SetAt([]int{0, 1}, -2-2i)
	fmt.Println("Transpose and update", b.ToSlice2())

	// Calculate eigenvalues of b.
	bufs := [3]*tensor.Dense{tensor.Zeros(1), tensor.Zeros(1), tensor.Zeros(1)}
	eigvals, eigvecs := tensor.Zeros(1), tensor.Zeros(1)
	if err := tensor.Eig(eigvals, eigvecs, b, bufs); err != nil {
		log.Fatalf("%v", err)
	}
	for i, vi := range []complex64{-3 + 1i, -1 + 3i} {
		if abs(eigvals.At(i)-vi) < 1e-6 {
			fmt.Printf("Eigenvalue %d: %v\n", i, vi)
		}
	}

	// Output:
	// Slice and reshape [[(0-6i) (5+0i)] [(-1+1i) (-1-1i)] [(4+0i) (-3+3i)]]
	// Transpose and update [[(-1+1i) (-2-2i)] [(-1-1i) (-3+3i)]]
	// Eigenvalue 0: (-3+1i)
	// Eigenvalue 1: (-1+3i)
}

func ExampleContract() {
	a := tensor.T3([][][]complex64{
		{{0, 1 + 1i}, {2, 3}, {4, 5}},
		{{6, 7}, {8, 9}, {10, 11}},
		{{12, 13}, {14, 15}, {16, 17}},
	})
	b := tensor.T3([][][]complex64{
		{{0, 1, 2}, {3, 4, 5}},
		{{6, 7, 8}, {9, 10, 11}},
	})
	out := tensor.Zeros(1)
	tensor.Contract(out, a, b, [][2]int{{1, 2}, {2, 1}})
	fmt.Println("a * b =", out.ToSlice2())

	// Output:
	// a * b = [[(50+3i) (140+9i)] [(140+0i) (446+0i)] [(230+0i) (752+0i)]]
}

func ExampleContract_kron() {
	a := tensor.T2([][]complex64{{1, 2}, {3, 4}})
	b := tensor.T2([][]complex64{{5, 6}, {7, 8}})
	out, buf := tensor.Zeros(1), tensor.Zeros(1)

	ops := []*tensor.Dense{a, b, b, a, a}

	// Compute tensor product from last to first.
	last := ops[len(ops)-1]
	out.Reset(last.Shape()...).Set(nil, last)
	for i := len(ops) - 2; i >= 0; i-- {
		op := ops[i]

		tensor.Contract(buf, op, out, nil)
		out.Reset(buf.Shape()...).Set(nil, buf)
	}
	// Reshape to matrix.
	out = out.Transpose(0, 2, 4, 6, 8, 1, 3, 5, 7, 9)
	buf.Reset(out.Shape()...).Set(nil, out)
	out = buf.Reshape(1<<len(ops), 1<<len(ops))
	fmt.Printf("Kronecker product: %#v\n", out.ToSlice2())

	// Output:
	// Kronecker product: [][]complex64{[]complex64{(25+0i), (50+0i), (50+0i), (100+0i), (30+0i), (60+0i), (60+0i), (120+0i), (30+0i), (60+0i), (60+0i), (120+0i), (36+0i), (72+0i), (72+0i), (144+0i), (50+0i), (100+0i), (100+0i), (200+0i), (60+0i), (120+0i), (120+0i), (240+0i), (60+0i), (120+0i), (120+0i), (240+0i), (72+0i), (144+0i), (144+0i), (288+0i)}, []complex64{(75+0i), (100+0i), (150+0i), (200+0i), (90+0i), (120+0i), (180+0i), (240+0i), (90+0i), (120+0i), (180+0i), (240+0i), (108+0i), (144+0i), (216+0i), (288+0i), (150+0i), (200+0i), (300+0i), (400+0i), (180+0i), (240+0i), (360+0i), (480+0i), (180+0i), (240+0i), (360+0i), (480+0i), (216+0i), (288+0i), (432+0i), (576+0i)}, []complex64{(75+0i), (150+0i), (100+0i), (200+0i), (90+0i), (180+0i), (120+0i), (240+0i), (90+0i), (180+0i), (120+0i), (240+0i), (108+0i), (216+0i), (144+0i), (288+0i), (150+0i), (300+0i), (200+0i), (400+0i), (180+0i), (360+0i), (240+0i), (480+0i), (180+0i), (360+0i), (240+0i), (480+0i), (216+0i), (432+0i), (288+0i), (576+0i)}, []complex64{(225+0i), (300+0i), (300+0i), (400+0i), (270+0i), (360+0i), (360+0i), (480+0i), (270+0i), (360+0i), (360+0i), (480+0i), (324+0i), (432+0i), (432+0i), (576+0i), (450+0i), (600+0i), (600+0i), (800+0i), (540+0i), (720+0i), (720+0i), (960+0i), (540+0i), (720+0i), (720+0i), (960+0i), (648+0i), (864+0i), (864+0i), (1152+0i)}, []complex64{(35+0i), (70+0i), (70+0i), (140+0i), (40+0i), (80+0i), (80+0i), (160+0i), (42+0i), (84+0i), (84+0i), (168+0i), (48+0i), (96+0i), (96+0i), (192+0i), (70+0i), (140+0i), (140+0i), (280+0i), (80+0i), (160+0i), (160+0i), (320+0i), (84+0i), (168+0i), (168+0i), (336+0i), (96+0i), (192+0i), (192+0i), (384+0i)}, []complex64{(105+0i), (140+0i), (210+0i), (280+0i), (120+0i), (160+0i), (240+0i), (320+0i), (126+0i), (168+0i), (252+0i), (336+0i), (144+0i), (192+0i), (288+0i), (384+0i), (210+0i), (280+0i), (420+0i), (560+0i), (240+0i), (320+0i), (480+0i), (640+0i), (252+0i), (336+0i), (504+0i), (672+0i), (288+0i), (384+0i), (576+0i), (768+0i)}, []complex64{(105+0i), (210+0i), (140+0i), (280+0i), (120+0i), (240+0i), (160+0i), (320+0i), (126+0i), (252+0i), (168+0i), (336+0i), (144+0i), (288+0i), (192+0i), (384+0i), (210+0i), (420+0i), (280+0i), (560+0i), (240+0i), (480+0i), (320+0i), (640+0i), (252+0i), (504+0i), (336+0i), (672+0i), (288+0i), (576+0i), (384+0i), (768+0i)}, []complex64{(315+0i), (420+0i), (420+0i), (560+0i), (360+0i), (480+0i), (480+0i), (640+0i), (378+0i), (504+0i), (504+0i), (672+0i), (432+0i), (576+0i), (576+0i), (768+0i), (630+0i), (840+0i), (840+0i), (1120+0i), (720+0i), (960+0i), (960+0i), (1280+0i), (756+0i), (1008+0i), (1008+0i), (1344+0i), (864+0i), (1152+0i), (1152+0i), (1536+0i)}, []complex64{(35+0i), (70+0i), (70+0i), (140+0i), (42+0i), (84+0i), (84+0i), (168+0i), (40+0i), (80+0i), (80+0i), (160+0i), (48+0i), (96+0i), (96+0i), (192+0i), (70+0i), (140+0i), (140+0i), (280+0i), (84+0i), (168+0i), (168+0i), (336+0i), (80+0i), (160+0i), (160+0i), (320+0i), (96+0i), (192+0i), (192+0i), (384+0i)}, []complex64{(105+0i), (140+0i), (210+0i), (280+0i), (126+0i), (168+0i), (252+0i), (336+0i), (120+0i), (160+0i), (240+0i), (320+0i), (144+0i), (192+0i), (288+0i), (384+0i), (210+0i), (280+0i), (420+0i), (560+0i), (252+0i), (336+0i), (504+0i), (672+0i), (240+0i), (320+0i), (480+0i), (640+0i), (288+0i), (384+0i), (576+0i), (768+0i)}, []complex64{(105+0i), (210+0i), (140+0i), (280+0i), (126+0i), (252+0i), (168+0i), (336+0i), (120+0i), (240+0i), (160+0i), (320+0i), (144+0i), (288+0i), (192+0i), (384+0i), (210+0i), (420+0i), (280+0i), (560+0i), (252+0i), (504+0i), (336+0i), (672+0i), (240+0i), (480+0i), (320+0i), (640+0i), (288+0i), (576+0i), (384+0i), (768+0i)}, []complex64{(315+0i), (420+0i), (420+0i), (560+0i), (378+0i), (504+0i), (504+0i), (672+0i), (360+0i), (480+0i), (480+0i), (640+0i), (432+0i), (576+0i), (576+0i), (768+0i), (630+0i), (840+0i), (840+0i), (1120+0i), (756+0i), (1008+0i), (1008+0i), (1344+0i), (720+0i), (960+0i), (960+0i), (1280+0i), (864+0i), (1152+0i), (1152+0i), (1536+0i)}, []complex64{(49+0i), (98+0i), (98+0i), (196+0i), (56+0i), (112+0i), (112+0i), (224+0i), (56+0i), (112+0i), (112+0i), (224+0i), (64+0i), (128+0i), (128+0i), (256+0i), (98+0i), (196+0i), (196+0i), (392+0i), (112+0i), (224+0i), (224+0i), (448+0i), (112+0i), (224+0i), (224+0i), (448+0i), (128+0i), (256+0i), (256+0i), (512+0i)}, []complex64{(147+0i), (196+0i), (294+0i), (392+0i), (168+0i), (224+0i), (336+0i), (448+0i), (168+0i), (224+0i), (336+0i), (448+0i), (192+0i), (256+0i), (384+0i), (512+0i), (294+0i), (392+0i), (588+0i), (784+0i), (336+0i), (448+0i), (672+0i), (896+0i), (336+0i), (448+0i), (672+0i), (896+0i), (384+0i), (512+0i), (768+0i), (1024+0i)}, []complex64{(147+0i), (294+0i), (196+0i), (392+0i), (168+0i), (336+0i), (224+0i), (448+0i), (168+0i), (336+0i), (224+0i), (448+0i), (192+0i), (384+0i), (256+0i), (512+0i), (294+0i), (588+0i), (392+0i), (784+0i), (336+0i), (672+0i), (448+0i), (896+0i), (336+0i), (672+0i), (448+0i), (896+0i), (384+0i), (768+0i), (512+0i), (1024+0i)}, []complex64{(441+0i), (588+0i), (588+0i), (784+0i), (504+0i), (672+0i), (672+0i), (896+0i), (504+0i), (672+0i), (672+0i), (896+0i), (576+0i), (768+0i), (768+0i), (1024+0i), (882+0i), (1176+0i), (1176+0i), (1568+0i), (1008+0i), (1344+0i), (1344+0i), (1792+0i), (1008+0i), (1344+0i), (1344+0i), (1792+0i), (1152+0i), (1536+0i), (1536+0i), (2048+0i)}, []complex64{(75+0i), (150+0i), (150+0i), (300+0i), (90+0i), (180+0i), (180+0i), (360+0i), (90+0i), (180+0i), (180+0i), (360+0i), (108+0i), (216+0i), (216+0i), (432+0i), (100+0i), (200+0i), (200+0i), (400+0i), (120+0i), (240+0i), (240+0i), (480+0i), (120+0i), (240+0i), (240+0i), (480+0i), (144+0i), (288+0i), (288+0i), (576+0i)}, []complex64{(225+0i), (300+0i), (450+0i), (600+0i), (270+0i), (360+0i), (540+0i), (720+0i), (270+0i), (360+0i), (540+0i), (720+0i), (324+0i), (432+0i), (648+0i), (864+0i), (300+0i), (400+0i), (600+0i), (800+0i), (360+0i), (480+0i), (720+0i), (960+0i), (360+0i), (480+0i), (720+0i), (960+0i), (432+0i), (576+0i), (864+0i), (1152+0i)}, []complex64{(225+0i), (450+0i), (300+0i), (600+0i), (270+0i), (540+0i), (360+0i), (720+0i), (270+0i), (540+0i), (360+0i), (720+0i), (324+0i), (648+0i), (432+0i), (864+0i), (300+0i), (600+0i), (400+0i), (800+0i), (360+0i), (720+0i), (480+0i), (960+0i), (360+0i), (720+0i), (480+0i), (960+0i), (432+0i), (864+0i), (576+0i), (1152+0i)}, []complex64{(675+0i), (900+0i), (900+0i), (1200+0i), (810+0i), (1080+0i), (1080+0i), (1440+0i), (810+0i), (1080+0i), (1080+0i), (1440+0i), (972+0i), (1296+0i), (1296+0i), (1728+0i), (900+0i), (1200+0i), (1200+0i), (1600+0i), (1080+0i), (1440+0i), (1440+0i), (1920+0i), (1080+0i), (1440+0i), (1440+0i), (1920+0i), (1296+0i), (1728+0i), (1728+0i), (2304+0i)}, []complex64{(105+0i), (210+0i), (210+0i), (420+0i), (120+0i), (240+0i), (240+0i), (480+0i), (126+0i), (252+0i), (252+0i), (504+0i), (144+0i), (288+0i), (288+0i), (576+0i), (140+0i), (280+0i), (280+0i), (560+0i), (160+0i), (320+0i), (320+0i), (640+0i), (168+0i), (336+0i), (336+0i), (672+0i), (192+0i), (384+0i), (384+0i), (768+0i)}, []complex64{(315+0i), (420+0i), (630+0i), (840+0i), (360+0i), (480+0i), (720+0i), (960+0i), (378+0i), (504+0i), (756+0i), (1008+0i), (432+0i), (576+0i), (864+0i), (1152+0i), (420+0i), (560+0i), (840+0i), (1120+0i), (480+0i), (640+0i), (960+0i), (1280+0i), (504+0i), (672+0i), (1008+0i), (1344+0i), (576+0i), (768+0i), (1152+0i), (1536+0i)}, []complex64{(315+0i), (630+0i), (420+0i), (840+0i), (360+0i), (720+0i), (480+0i), (960+0i), (378+0i), (756+0i), (504+0i), (1008+0i), (432+0i), (864+0i), (576+0i), (1152+0i), (420+0i), (840+0i), (560+0i), (1120+0i), (480+0i), (960+0i), (640+0i), (1280+0i), (504+0i), (1008+0i), (672+0i), (1344+0i), (576+0i), (1152+0i), (768+0i), (1536+0i)}, []complex64{(945+0i), (1260+0i), (1260+0i), (1680+0i), (1080+0i), (1440+0i), (1440+0i), (1920+0i), (1134+0i), (1512+0i), (1512+0i), (2016+0i), (1296+0i), (1728+0i), (1728+0i), (2304+0i), (1260+0i), (1680+0i), (1680+0i), (2240+0i), (1440+0i), (1920+0i), (1920+0i), (2560+0i), (1512+0i), (2016+0i), (2016+0i), (2688+0i), (1728+0i), (2304+0i), (2304+0i), (3072+0i)}, []complex64{(105+0i), (210+0i), (210+0i), (420+0i), (126+0i), (252+0i), (252+0i), (504+0i), (120+0i), (240+0i), (240+0i), (480+0i), (144+0i), (288+0i), (288+0i), (576+0i), (140+0i), (280+0i), (280+0i), (560+0i), (168+0i), (336+0i), (336+0i), (672+0i), (160+0i), (320+0i), (320+0i), (640+0i), (192+0i), (384+0i), (384+0i), (768+0i)}, []complex64{(315+0i), (420+0i), (630+0i), (840+0i), (378+0i), (504+0i), (756+0i), (1008+0i), (360+0i), (480+0i), (720+0i), (960+0i), (432+0i), (576+0i), (864+0i), (1152+0i), (420+0i), (560+0i), (840+0i), (1120+0i), (504+0i), (672+0i), (1008+0i), (1344+0i), (480+0i), (640+0i), (960+0i), (1280+0i), (576+0i), (768+0i), (1152+0i), (1536+0i)}, []complex64{(315+0i), (630+0i), (420+0i), (840+0i), (378+0i), (756+0i), (504+0i), (1008+0i), (360+0i), (720+0i), (480+0i), (960+0i), (432+0i), (864+0i), (576+0i), (1152+0i), (420+0i), (840+0i), (560+0i), (1120+0i), (504+0i), (1008+0i), (672+0i), (1344+0i), (480+0i), (960+0i), (640+0i), (1280+0i), (576+0i), (1152+0i), (768+0i), (1536+0i)}, []complex64{(945+0i), (1260+0i), (1260+0i), (1680+0i), (1134+0i), (1512+0i), (1512+0i), (2016+0i), (1080+0i), (1440+0i), (1440+0i), (1920+0i), (1296+0i), (1728+0i), (1728+0i), (2304+0i), (1260+0i), (1680+0i), (1680+0i), (2240+0i), (1512+0i), (2016+0i), (2016+0i), (2688+0i), (1440+0i), (1920+0i), (1920+0i), (2560+0i), (1728+0i), (2304+0i), (2304+0i), (3072+0i)}, []complex64{(147+0i), (294+0i), (294+0i), (588+0i), (168+0i), (336+0i), (336+0i), (672+0i), (168+0i), (336+0i), (336+0i), (672+0i), (192+0i), (384+0i), (384+0i), (768+0i), (196+0i), (392+0i), (392+0i), (784+0i), (224+0i), (448+0i), (448+0i), (896+0i), (224+0i), (448+0i), (448+0i), (896+0i), (256+0i), (512+0i), (512+0i), (1024+0i)}, []complex64{(441+0i), (588+0i), (882+0i), (1176+0i), (504+0i), (672+0i), (1008+0i), (1344+0i), (504+0i), (672+0i), (1008+0i), (1344+0i), (576+0i), (768+0i), (1152+0i), (1536+0i), (588+0i), (784+0i), (1176+0i), (1568+0i), (672+0i), (896+0i), (1344+0i), (1792+0i), (672+0i), (896+0i), (1344+0i), (1792+0i), (768+0i), (1024+0i), (1536+0i), (2048+0i)}, []complex64{(441+0i), (882+0i), (588+0i), (1176+0i), (504+0i), (1008+0i), (672+0i), (1344+0i), (504+0i), (1008+0i), (672+0i), (1344+0i), (576+0i), (1152+0i), (768+0i), (1536+0i), (588+0i), (1176+0i), (784+0i), (1568+0i), (672+0i), (1344+0i), (896+0i), (1792+0i), (672+0i), (1344+0i), (896+0i), (1792+0i), (768+0i), (1536+0i), (1024+0i), (2048+0i)}, []complex64{(1323+0i), (1764+0i), (1764+0i), (2352+0i), (1512+0i), (2016+0i), (2016+0i), (2688+0i), (1512+0i), (2016+0i), (2016+0i), (2688+0i), (1728+0i), (2304+0i), (2304+0i), (3072+0i), (1764+0i), (2352+0i), (2352+0i), (3136+0i), (2016+0i), (2688+0i), (2688+0i), (3584+0i), (2016+0i), (2688+0i), (2688+0i), (3584+0i), (2304+0i), (3072+0i), (3072+0i), (4096+0i)}}
}

func abs(x complex64) float64 {
	return cmplx.Abs(complex128(x))
}
